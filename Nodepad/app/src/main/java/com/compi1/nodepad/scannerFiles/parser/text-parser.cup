package com.compi1.nodepad.scannerFiles.parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Collections;

import android.util.Log;

import com.compi1.nodepad.scannerFiles.lexer.TextLexer;
import com.compi1.nodepad.src.text_output.*;

parser code {:

  private List<TextSyntacOutput> data = new ArrayList<>();

  public Parser( TextLexer lex) {
        super(lex);
  }

  public List<TextSyntacOutput> getData(){
        return data;    
  }

:}

/*      TERMINALES      */
// Terminales de las cabeceras
terminal  H1, H2, H3, H4, H5, H6;

// Terminales de los tipos de formatos
terminal ITALIC, BOLD, ITALIC_BOLD;

// Terminales de las listas numeradas
terminal INIT_LIST;
terminal String ITEM_NUM;

// Terminales de las listas no numradas
terminal ITEM_LIST;

// Terminales  de las oraciones
terminal String SENTENCE;

// Terminal del salto de linea
terminal String BREAKLINE;

/*      NO TERMINALES   */
// No terminales asociados a texto
non terminal text;
non terminal header;
non terminal parragraph;
non terminal format;
non terminal list;

// No terminales asociados a cabecera
non terminal Float header_mark;

// No terminales asociados a parrafo
non terminal String sentences;

// No terminales asociados a formato
non terminal String bold;
non terminal String italic;
non terminal String italic_bold;

// No terminales asociodos a lista
non terminal List<String[]> numbered_list;
non terminal no_numbered_list;

// No terminales asociados a lista numerada
non terminal String         first_item;
non terminal List<String[]> numbered_items;
non terminal String[]       numbered_item;

// No terminales asociados a lista no numerada
non terminal List<String> no_numbered_items;
non terminal String       no_numbered_item;


/*    REGLAS DE PRECEDENCIA   */
precedence right SENTENCE;
precedence right ITEM_LIST;
/*    THER GRAMMAR      */

start with text;

text ::= text header
        | header
        | text parragraph
        | parragraph
        | text format
        | format
        | text list
        | list
        | text error:er        {: data.add( new LexerError((String)er)); :}
        | error:er             {: data.add( new LexerError((String)er)); :}
        | text BREAKLINE:bl    {: data.add( new Paragraph(bl));  :}
        | BREAKLINE:bl         {: data.add( new Paragraph(bl));  :}
        ;

header ::= header_mark:size_text SENTENCE:h_body {: data.add( new SizeText(h_body, size_text)); Log.d("LexerDebug", "Se leyo un header"); :}
        ;

header_mark ::= H1 {: RESULT = SizeText.H1; :}
              | H2 {: RESULT = SizeText.H2; :}
              | H3 {: RESULT = SizeText.H3; :}
              | H4 {: RESULT = SizeText.H4; :}
              | H5 {: RESULT = SizeText.H5; :}
              | H6 {: RESULT = SizeText.H6; :}
              ;

parragraph ::= sentences:sss               {: data.add( new Paragraph(sss)); Log.d("LexerDebug", "Se leyo el parrafo: "+sss); :}
             ;

sentences ::= sentences:ss SENTENCE:s     {: RESULT = ss + s; :}
            | SENTENCE:s                  {: RESULT = s; :}
            ;

format ::= bold:ss_bold                                 {: data.add( new StyleText( ss_bold, FormatType.bold ));               Log.d("LexerDebug", "Se leyo un texto en negrita"); :}
         | italic:ss_italic                             {: data.add( new StyleText( ss_italic, FormatType.italic ));           Log.d("LexerDebug", "Se leyo un texto en italica"); :}
         | italic_bold:ss_italic_bold                   {: data.add( new StyleText( ss_italic_bold, FormatType.italicBold ));  Log.d("LexerDebug", "Se leyo un texto en negrita e italica"); :}
         ;

bold ::= BOLD SENTENCE:s_bold BOLD                               {: RESULT = s_bold; :}
       ;

italic ::= ITALIC SENTENCE:s_italic  ITALIC                      {: RESULT = s_italic; :}
         ;

italic_bold ::= ITALIC_BOLD SENTENCE:s_italic_bold ITALIC_BOLD   {: RESULT = s_italic_bold; :}
              ;

list ::= numbered_list
       | no_numbered_list
       ;

numbered_list ::= first_item:ss_init1 numbered_items:array_list1                 {: data.add(new  NumberedList(ss_init1, array_list1) );         Log.d("LexerDebug", "Se leyo una lista numerada"); :}                     
                | first_item:ss_init                                             {: data.add(new  NumberedList(ss_init, new ArrayList<>()) );   Log.d("LexerDebug", "Se leyo una lista numerada"); :}
                ;

first_item ::= INIT_LIST SENTENCE:s_init                                          {: RESULT = s_init; :}
             ;

numbered_items ::= numbered_items:array_list numbered_item:array_item1            {: array_list.add(array_item1); RESULT = array_list; :}
                 | numbered_item:array_item                                       {: RESULT = new ArrayList<>(Collections.singletonList(array_item)); :}
                 ;

numbered_item ::= ITEM_NUM:item_num SENTENCE:n_item                                {: RESULT = new String[]{item_num, n_item}; :}
                ;

no_numbered_list ::= no_numbered_items:l_item_list                                 {: data.add(new TextList(l_item_list));  Log.d("LexerDebug", "Se leyo una lista no numerada"); :}
                   ;

no_numbered_items ::= no_numbered_items:item_list no_numbered_item:sss_item        {: item_list.add(sss_item); RESULT = item_list; :}
                    | no_numbered_item:ss_item                                     {: RESULT = new ArrayList<>(Arrays.asList(ss_item)); :}
                    ;

no_numbered_item ::= ITEM_LIST SENTENCE:s_item                                     {: RESULT = s_item; :}
                   ;