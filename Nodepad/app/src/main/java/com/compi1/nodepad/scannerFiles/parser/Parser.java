
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi1.nodepad.scannerFiles.parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Collections;
import android.util.Log;
import com.compi1.nodepad.scannerFiles.lexer.TextLexer;
import com.compi1.nodepad.src.text_output.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\002\004\000\002\002\003\000\002\002\004\000\002" +
    "\002\003\000\002\003\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\004\003\000\002\010\004\000" +
    "\002\010\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\011\005\000\002\012\005\000\002\013" +
    "\005\000\002\006\003\000\002\006\003\000\002\014\004" +
    "\000\002\014\003\000\002\016\004\000\002\017\004\000" +
    "\002\017\003\000\002\020\004\000\002\015\003\000\002" +
    "\021\004\000\002\021\003\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\036\003\027\004\020\005\016\006\014\007" +
    "\013\010\012\011\011\012\030\013\037\014\034\015\035" +
    "\017\026\020\004\021\022\001\002\000\040\002\uffeb\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\001\002\000\040\002\uffe9\003\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\001\002\000\040" +
    "\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\001\002\000\040\002\uffe8\003\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\001" +
    "\002\000\040\002\uffdc\003\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\017\026\020\uffdc\021\uffdc\001\002\000\004\020\uffee" +
    "\001\002\000\004\020\uffef\001\002\000\004\020\ufff0\001" +
    "\002\000\004\020\ufff1\001\002\000\004\020\066\001\002" +
    "\000\004\020\ufff2\001\002\000\040\002\ufffd\003\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\001" +
    "\002\000\004\020\ufff3\001\002\000\040\002\060\003\062" +
    "\004\020\005\016\006\014\007\013\010\012\011\011\012" +
    "\030\013\037\014\034\015\035\017\026\020\004\021\061" +
    "\001\002\000\040\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\017\ufff5\020\ufff5\021\ufff5\001\002\000\040\002" +
    "\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\001\002\000\040\002\uffda\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021\uffda\001\002" +
    "\000\040\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\017\uffea\020\uffea\021\uffea\001\002\000\004\020\056\001" +
    "\002\000\040\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\001\002\000\004\020\054" +
    "\001\002\000\040\002\uffff\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff" +
    "\015\uffff\017\uffff\020\uffff\021\uffff\001\002\000\040\002" +
    "\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020" +
    "\053\021\uffed\001\002\000\040\002\ufffb\003\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\001\002" +
    "\000\004\020\051\001\002\000\004\020\050\001\002\000" +
    "\040\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\001\002\000\004\020\046\001\002" +
    "\000\042\002\uffe1\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\043\017\uffe1\020\uffe1\021\uffe1\001\002\000\042\002" +
    "\uffde\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\001\002\000\042\002\uffe2\003\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\043\017\uffe2\020\uffe2" +
    "\021\uffe2\001\002\000\004\020\044\001\002\000\042\002" +
    "\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\001\002\000\042\002\uffdf\003\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\001\002\000\004\013\047\001\002\000\040\002" +
    "\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\001\002\000\042\002\uffe0\003\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\001\002\000\004\014\052\001\002\000\040\002\uffe5\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\001\002\000\040\002\uffec\003\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\017\uffec\020\uffec\021\uffec\001\002\000\004" +
    "\012\055\001\002\000\040\002\uffe6\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\001\002\000" +
    "\040\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\001\002\000\040\002\ufffe\003\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\001\002\000\004\002\001\001\002\000\040\002\ufff6\003" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\001\002\000\040\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\001\002\000\040" +
    "\002\000\003\000\004\000\005\000\006\000\007\000\010" +
    "\000\011\000\012\000\013\000\014\000\015\000\017\000" +
    "\020\000\021\000\001\002\000\040\002\ufffc\003\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc\021\ufffc\001" +
    "\002\000\040\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\001\002\000\040\002\ufff4" +
    "\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\001\002\000\040\002\uffdb\003\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\040\002\020\003\030\004\016\005\032\006" +
    "\035\007\014\010\031\011\024\012\004\013\006\014\005" +
    "\015\022\016\037\021\007\022\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\062\004\056\005\063\006\064\007\014\010\031" +
    "\011\024\012\004\013\006\014\005\015\022\016\037\021" +
    "\007\022\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\041" +
    "\020\040\001\001\000\002\001\001\000\004\020\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  private List<TextSyntacOutput> data = new ArrayList<>();

  public Parser( TextLexer lex) {
        super(lex);
  }

  public List<TextSyntacOutput> getData(){
        return data;    
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= text EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // text ::= text header 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // text ::= header 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // text ::= text parragraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // text ::= parragraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // text ::= text format 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // text ::= format 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // text ::= text list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // text ::= list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // text ::= text error 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new LexerError((String)er)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // text ::= error 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new LexerError((String)er)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // text ::= text BREAKLINE 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new Paragraph(bl));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // text ::= BREAKLINE 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new Paragraph(bl));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // header ::= header_mark SENTENCE 
            {
              Object RESULT =null;
		int size_textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int size_textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float size_text = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int h_bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int h_bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String h_body = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new SizeText(h_body, size_text)); Log.d("LexerDebug", "Se leyo un header"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // header_mark ::= H1 
            {
              Float RESULT =null;
		 RESULT = SizeText.H1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_mark",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // header_mark ::= H2 
            {
              Float RESULT =null;
		 RESULT = SizeText.H2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_mark",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // header_mark ::= H3 
            {
              Float RESULT =null;
		 RESULT = SizeText.H3; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_mark",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // header_mark ::= H4 
            {
              Float RESULT =null;
		 RESULT = SizeText.H4; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_mark",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // header_mark ::= H5 
            {
              Float RESULT =null;
		 RESULT = SizeText.H5; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_mark",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // header_mark ::= H6 
            {
              Float RESULT =null;
		 RESULT = SizeText.H6; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_mark",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parragraph ::= sentences 
            {
              Object RESULT =null;
		int sssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sss = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new Paragraph(sss)); Log.d("LexerDebug", "Se leyo el parrafo: "+sss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parragraph",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentences ::= sentences SENTENCE 
            {
              String RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss + s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentences",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentences ::= SENTENCE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentences",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // format ::= bold 
            {
              Object RESULT =null;
		int ss_boldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ss_boldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss_bold = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new StyleText( ss_bold, FormatType.bold ));               Log.d("LexerDebug", "Se leyo un texto en negrita"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("format",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // format ::= italic 
            {
              Object RESULT =null;
		int ss_italicleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ss_italicright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss_italic = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new StyleText( ss_italic, FormatType.italic ));           Log.d("LexerDebug", "Se leyo un texto en italica"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("format",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // format ::= italic_bold 
            {
              Object RESULT =null;
		int ss_italic_boldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ss_italic_boldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss_italic_bold = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add( new StyleText( ss_italic_bold, FormatType.italicBold ));  Log.d("LexerDebug", "Se leyo un texto en negrita e italica"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("format",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bold ::= BOLD SENTENCE BOLD 
            {
              String RESULT =null;
		int s_boldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_boldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s_bold = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s_bold; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bold",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // italic ::= ITALIC SENTENCE ITALIC 
            {
              String RESULT =null;
		int s_italicleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_italicright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s_italic = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s_italic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("italic",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // italic_bold ::= ITALIC_BOLD SENTENCE ITALIC_BOLD 
            {
              String RESULT =null;
		int s_italic_boldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_italic_boldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s_italic_bold = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s_italic_bold; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("italic_bold",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list ::= numbered_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list ::= no_numbered_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numbered_list ::= first_item numbered_items 
            {
              List<String[]> RESULT =null;
		int ss_init1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ss_init1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ss_init1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int array_list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String[]> array_list1 = (List<String[]>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add(new  NumberedList(ss_init1, array_list1) );         Log.d("LexerDebug", "Se leyo una lista numerada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbered_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numbered_list ::= first_item 
            {
              List<String[]> RESULT =null;
		int ss_initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ss_initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss_init = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add(new  NumberedList(ss_init, new ArrayList<>()) );   Log.d("LexerDebug", "Se leyo una lista numerada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbered_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // first_item ::= INIT_LIST SENTENCE 
            {
              String RESULT =null;
		int s_initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s_initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s_init = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s_init; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("first_item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numbered_items ::= numbered_items numbered_item 
            {
              List<String[]> RESULT =null;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String[]> array_list = (List<String[]>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int array_item1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_item1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String[] array_item1 = (String[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 array_list.add(array_item1); RESULT = array_list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbered_items",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numbered_items ::= numbered_item 
            {
              List<String[]> RESULT =null;
		int array_itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String[] array_item = (String[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Collections.singletonList(array_item)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbered_items",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numbered_item ::= ITEM_NUM SENTENCE 
            {
              String[] RESULT =null;
		int item_numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int item_numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String item_num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n_itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n_item = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new String[]{item_num, n_item}; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbered_item",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // no_numbered_list ::= no_numbered_items 
            {
              Object RESULT =null;
		int l_item_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_item_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> l_item_list = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 data.add(new TextList(l_item_list));  Log.d("LexerDebug", "Se leyo una lista no numerada"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_numbered_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // no_numbered_items ::= no_numbered_items no_numbered_item 
            {
              List<String> RESULT =null;
		int item_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int item_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> item_list = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sss_itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sss_itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sss_item = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 item_list.add(sss_item); RESULT = item_list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_numbered_items",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // no_numbered_items ::= no_numbered_item 
            {
              List<String> RESULT =null;
		int ss_itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ss_itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ss_item = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(ss_item)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_numbered_items",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // no_numbered_item ::= ITEM_LIST SENTENCE 
            {
              String RESULT =null;
		int s_itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s_itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s_item = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s_item; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("no_numbered_item",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
